{"ast":null,"code":"import { DecodeStream } from './DecodeStream.js';\nconst textEncoder = new TextEncoder();\nconst isBigEndian = new Uint8Array(new Uint16Array([0x1234]).buffer)[0] == 0x12;\nexport class EncodeStream {\n  constructor(buffer) {\n    this.buffer = buffer;\n    this.view = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);\n    this.pos = 0;\n  }\n  writeBuffer(buffer) {\n    this.buffer.set(buffer, this.pos);\n    this.pos += buffer.length;\n  }\n  writeString(string) {\n    let encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ascii';\n    let buf;\n    switch (encoding) {\n      case 'utf16le':\n      case 'utf16-le':\n      case 'ucs2':\n        // node treats this the same as utf16.\n        buf = stringToUtf16(string, isBigEndian);\n        break;\n      case 'utf16be':\n      case 'utf16-be':\n        buf = stringToUtf16(string, !isBigEndian);\n        break;\n      case 'utf8':\n        buf = textEncoder.encode(string);\n        break;\n      case 'ascii':\n        buf = stringToAscii(string);\n        break;\n      default:\n        throw new Error(`Unsupported encoding: ${encoding}`);\n    }\n    this.writeBuffer(buf);\n  }\n  writeUInt24BE(val) {\n    this.buffer[this.pos++] = val >>> 16 & 0xff;\n    this.buffer[this.pos++] = val >>> 8 & 0xff;\n    this.buffer[this.pos++] = val & 0xff;\n  }\n  writeUInt24LE(val) {\n    this.buffer[this.pos++] = val & 0xff;\n    this.buffer[this.pos++] = val >>> 8 & 0xff;\n    this.buffer[this.pos++] = val >>> 16 & 0xff;\n  }\n  writeInt24BE(val) {\n    if (val >= 0) {\n      this.writeUInt24BE(val);\n    } else {\n      this.writeUInt24BE(val + 0xffffff + 1);\n    }\n  }\n  writeInt24LE(val) {\n    if (val >= 0) {\n      this.writeUInt24LE(val);\n    } else {\n      this.writeUInt24LE(val + 0xffffff + 1);\n    }\n  }\n  fill(val, length) {\n    if (length < this.buffer.length) {\n      this.buffer.fill(val, this.pos, this.pos + length);\n      this.pos += length;\n    } else {\n      const buf = new Uint8Array(length);\n      buf.fill(val);\n      this.writeBuffer(buf);\n    }\n  }\n}\nfunction stringToUtf16(string, swap) {\n  let buf = new Uint16Array(string.length);\n  for (let i = 0; i < string.length; i++) {\n    let code = string.charCodeAt(i);\n    if (swap) {\n      code = code >> 8 | (code & 0xff) << 8;\n    }\n    buf[i] = code;\n  }\n  return new Uint8Array(buf.buffer);\n}\nfunction stringToAscii(string) {\n  let buf = new Uint8Array(string.length);\n  for (let i = 0; i < string.length; i++) {\n    // Match node.js behavior - encoding allows 8-bit rather than 7-bit.\n    buf[i] = string.charCodeAt(i);\n  }\n  return buf;\n}\nfor (let key of Object.getOwnPropertyNames(DataView.prototype)) {\n  if (key.slice(0, 3) === 'set') {\n    let type = key.slice(3).replace('Ui', 'UI');\n    if (type === 'Float32') {\n      type = 'Float';\n    } else if (type === 'Float64') {\n      type = 'Double';\n    }\n    let bytes = DecodeStream.TYPES[type];\n    EncodeStream.prototype['write' + type + (bytes === 1 ? '' : 'BE')] = function (value) {\n      this.view[key](this.pos, value, false);\n      this.pos += bytes;\n    };\n    if (bytes !== 1) {\n      EncodeStream.prototype['write' + type + 'LE'] = function (value) {\n        this.view[key](this.pos, value, true);\n        this.pos += bytes;\n      };\n    }\n  }\n}","map":{"version":3,"names":["DecodeStream","textEncoder","TextEncoder","isBigEndian","Uint8Array","Uint16Array","buffer","EncodeStream","constructor","view","DataView","byteOffset","byteLength","pos","writeBuffer","set","length","writeString","string","encoding","buf","stringToUtf16","encode","stringToAscii","Error","writeUInt24BE","val","writeUInt24LE","writeInt24BE","writeInt24LE","fill","swap","i","code","charCodeAt","key","Object","getOwnPropertyNames","prototype","slice","type","replace","bytes","TYPES","value"],"sources":["C:/Users/Abdullah/Desktop/Project/TTP-Project/client/node_modules/restructure/src/EncodeStream.js"],"sourcesContent":["import {DecodeStream} from './DecodeStream.js';\n\nconst textEncoder = new TextEncoder();\nconst isBigEndian = new Uint8Array(new Uint16Array([0x1234]).buffer)[0] == 0x12;\n\nexport class EncodeStream {\n  constructor(buffer) {\n    this.buffer = buffer;\n    this.view = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);\n    this.pos = 0;\n  }\n\n  writeBuffer(buffer) {\n    this.buffer.set(buffer, this.pos);\n    this.pos += buffer.length;\n  }\n\n  writeString(string, encoding = 'ascii') {\n    let buf;\n    switch (encoding) {\n      case 'utf16le':\n      case 'utf16-le':\n      case 'ucs2': // node treats this the same as utf16.\n        buf = stringToUtf16(string, isBigEndian);\n        break;\n\n      case 'utf16be':\n      case 'utf16-be':\n        buf = stringToUtf16(string, !isBigEndian);\n        break;\n\n      case 'utf8':\n        buf = textEncoder.encode(string);\n        break;\n\n      case 'ascii':\n        buf = stringToAscii(string);\n        break;\n\n      default:\n        throw new Error(`Unsupported encoding: ${encoding}`);\n    }\n\n    this.writeBuffer(buf);\n  }\n\n  writeUInt24BE(val) {\n    this.buffer[this.pos++] = (val >>> 16) & 0xff;\n    this.buffer[this.pos++] = (val >>> 8) & 0xff;\n    this.buffer[this.pos++] = val & 0xff;\n  }\n\n  writeUInt24LE(val) {\n    this.buffer[this.pos++] = val & 0xff;\n    this.buffer[this.pos++] = (val >>> 8) & 0xff;\n    this.buffer[this.pos++] = (val >>> 16) & 0xff;\n  }\n\n  writeInt24BE(val) {\n    if (val >= 0) {\n      this.writeUInt24BE(val);\n    } else {\n      this.writeUInt24BE(val + 0xffffff + 1);\n    }\n  }\n\n  writeInt24LE(val) {\n    if (val >= 0) {\n      this.writeUInt24LE(val);\n    } else {\n      this.writeUInt24LE(val + 0xffffff + 1);\n    }\n  }\n\n  fill(val, length) {\n    if (length < this.buffer.length) {\n      this.buffer.fill(val, this.pos, this.pos + length);\n      this.pos += length;\n    } else {\n      const buf = new Uint8Array(length);\n      buf.fill(val);\n      this.writeBuffer(buf);\n    }\n  }\n}\n\nfunction stringToUtf16(string, swap) {\n  let buf = new Uint16Array(string.length);\n  for (let i = 0; i < string.length; i++) {\n    let code = string.charCodeAt(i);\n    if (swap) {\n      code = (code >> 8) | ((code & 0xff) << 8);\n    }\n    buf[i] = code;\n  }\n  return new Uint8Array(buf.buffer);\n}\n\nfunction stringToAscii(string) {\n  let buf = new Uint8Array(string.length);\n  for (let i = 0; i < string.length; i++) {\n    // Match node.js behavior - encoding allows 8-bit rather than 7-bit.\n    buf[i] = string.charCodeAt(i);\n  }\n  return buf;\n}\n\nfor (let key of Object.getOwnPropertyNames(DataView.prototype)) {\n  if (key.slice(0, 3) === 'set') {\n    let type = key.slice(3).replace('Ui', 'UI');\n    if (type === 'Float32') {\n      type = 'Float';\n    } else if (type === 'Float64') {\n      type = 'Double';\n    }\n    let bytes = DecodeStream.TYPES[type];\n    EncodeStream.prototype['write' + type + (bytes === 1 ? '' : 'BE')] = function (value) {\n      this.view[key](this.pos, value, false);\n      this.pos += bytes;\n    };\n\n    if (bytes !== 1) {\n      EncodeStream.prototype['write' + type + 'LE'] = function (value) {\n        this.view[key](this.pos, value, true);\n        this.pos += bytes;\n      };\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}