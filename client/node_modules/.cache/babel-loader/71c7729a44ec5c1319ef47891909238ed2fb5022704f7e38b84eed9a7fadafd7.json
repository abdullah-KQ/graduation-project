{"ast":null,"code":"/** @license React v0.17.0\n * scheduler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function () {\n    'use strict';\n\n    Object.defineProperty(exports, '__esModule', {\n      value: true\n    });\n    var enableSchedulerDebugging = false;\n    var enableIsInputPending = false;\n    var enableMessageLoopImplementation = true;\n    var enableProfiling = true;\n\n    // works by scheduling a requestAnimationFrame, storing the time for the start\n    // of the frame, then scheduling a postMessage which gets scheduled after paint.\n    // Within the postMessage handler do as much work as possible until time + frame\n    // rate. By separating the idle call into a separate event tick we ensure that\n    // layout, paint and other browser work is counted against the available time.\n    // The frame rate is dynamically adjusted.\n\n    var requestHostCallback;\n    var requestHostTimeout;\n    var cancelHostTimeout;\n    var shouldYieldToHost;\n    var requestPaint;\n    if (\n    // If Scheduler runs in a non-DOM environment, it falls back to a naive\n    // implementation using setTimeout.\n    typeof window === 'undefined' ||\n    // Check if MessageChannel is supported, too.\n    typeof MessageChannel !== 'function') {\n      // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,\n      // fallback to a naive implementation.\n      var _callback = null;\n      var _timeoutID = null;\n      var _flushCallback = function () {\n        if (_callback !== null) {\n          try {\n            var currentTime = exports.unstable_now();\n            var hasRemainingTime = true;\n            _callback(hasRemainingTime, currentTime);\n            _callback = null;\n          } catch (e) {\n            setTimeout(_flushCallback, 0);\n            throw e;\n          }\n        }\n      };\n      var initialTime = Date.now();\n      exports.unstable_now = function () {\n        return Date.now() - initialTime;\n      };\n      requestHostCallback = function (cb) {\n        if (_callback !== null) {\n          // Protect against re-entrancy.\n          setTimeout(requestHostCallback, 0, cb);\n        } else {\n          _callback = cb;\n          setTimeout(_flushCallback, 0);\n        }\n      };\n      requestHostTimeout = function (cb, ms) {\n        _timeoutID = setTimeout(cb, ms);\n      };\n      cancelHostTimeout = function () {\n        clearTimeout(_timeoutID);\n      };\n      shouldYieldToHost = function () {\n        return false;\n      };\n      requestPaint = exports.unstable_forceFrameRate = function () {};\n    } else {\n      // Capture local references to native APIs, in case a polyfill overrides them.\n      var performance = window.performance;\n      var _Date = window.Date;\n      var _setTimeout = window.setTimeout;\n      var _clearTimeout = window.clearTimeout;\n      var requestAnimationFrame = window.requestAnimationFrame;\n      var cancelAnimationFrame = window.cancelAnimationFrame;\n      if (typeof console !== 'undefined') {\n        // TODO: Remove fb.me link\n        if (typeof requestAnimationFrame !== 'function') {\n          console.error(\"This browser doesn't support requestAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n        }\n        if (typeof cancelAnimationFrame !== 'function') {\n          console.error(\"This browser doesn't support cancelAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n        }\n      }\n      if (typeof performance === 'object' && typeof performance.now === 'function') {\n        exports.unstable_now = function () {\n          return performance.now();\n        };\n      } else {\n        var _initialTime = _Date.now();\n        exports.unstable_now = function () {\n          return _Date.now() - _initialTime;\n        };\n      }\n      var isRAFLoopRunning = false;\n      var isMessageLoopRunning = false;\n      var scheduledHostCallback = null;\n      var rAFTimeoutID = -1;\n      var taskTimeoutID = -1;\n      var frameLength = enableMessageLoopImplementation ?\n      // We won't attempt to align with the vsync. Instead we'll yield multiple\n      // times per frame, often enough to keep it responsive even at really\n      // high frame rates > 120.\n      5 :\n      // Use a heuristic to measure the frame rate and yield at the end of the\n      // frame. We start out assuming that we run at 30fps but then the\n      // heuristic tracking will adjust this value to a faster fps if we get\n      // more frequent animation frames.\n      33.33;\n      var prevRAFTime = -1;\n      var prevRAFInterval = -1;\n      var frameDeadline = 0;\n      var fpsLocked = false; // TODO: Make this configurable\n      // TODO: Adjust this based on priority?\n\n      var maxFrameLength = 300;\n      var needsPaint = false;\n      if (enableIsInputPending && navigator !== undefined && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined) {\n        var scheduling = navigator.scheduling;\n        shouldYieldToHost = function () {\n          var currentTime = exports.unstable_now();\n          if (currentTime >= frameDeadline) {\n            // There's no time left in the frame. We may want to yield control of\n            // the main thread, so the browser can perform high priority tasks. The\n            // main ones are painting and user input. If there's a pending paint or\n            // a pending input, then we should yield. But if there's neither, then\n            // we can yield less often while remaining responsive. We'll eventually\n            // yield regardless, since there could be a pending paint that wasn't\n            // accompanied by a call to `requestPaint`, or other main thread tasks\n            // like network events.\n            if (needsPaint || scheduling.isInputPending()) {\n              // There is either a pending paint or a pending input.\n              return true;\n            } // There's no pending input. Only yield if we've reached the max\n            // frame length.\n\n            return currentTime >= frameDeadline + maxFrameLength;\n          } else {\n            // There's still time left in the frame.\n            return false;\n          }\n        };\n        requestPaint = function () {\n          needsPaint = true;\n        };\n      } else {\n        // `isInputPending` is not available. Since we have no way of knowing if\n        // there's pending input, always yield at the end of the frame.\n        shouldYieldToHost = function () {\n          return exports.unstable_now() >= frameDeadline;\n        }; // Since we yield every frame regardless, `requestPaint` has no effect.\n\n        requestPaint = function () {};\n      }\n      exports.unstable_forceFrameRate = function (fps) {\n        if (fps < 0 || fps > 125) {\n          console.error('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');\n          return;\n        }\n        if (fps > 0) {\n          frameLength = Math.floor(1000 / fps);\n          fpsLocked = true;\n        } else {\n          // reset the framerate\n          frameLength = 33.33;\n          fpsLocked = false;\n        }\n      };\n      var performWorkUntilDeadline = function () {\n        if (enableMessageLoopImplementation) {\n          if (scheduledHostCallback !== null) {\n            var currentTime = exports.unstable_now(); // Yield after `frameLength` ms, regardless of where we are in the vsync\n            // cycle. This means there's always time remaining at the beginning of\n            // the message event.\n\n            frameDeadline = currentTime + frameLength;\n            var hasTimeRemaining = true;\n            try {\n              var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n              if (!hasMoreWork) {\n                isMessageLoopRunning = false;\n                scheduledHostCallback = null;\n              } else {\n                // If there's more work, schedule the next message event at the end\n                // of the preceding one.\n                port.postMessage(null);\n              }\n            } catch (error) {\n              // If a scheduler task throws, exit the current browser task so the\n              // error can be observed.\n              port.postMessage(null);\n              throw error;\n            }\n          } else {\n            isMessageLoopRunning = false;\n          } // Yielding to the browser will give it a chance to paint, so we can\n          // reset this.\n\n          needsPaint = false;\n        } else {\n          if (scheduledHostCallback !== null) {\n            var _currentTime = exports.unstable_now();\n            var _hasTimeRemaining = frameDeadline - _currentTime > 0;\n            try {\n              var _hasMoreWork = scheduledHostCallback(_hasTimeRemaining, _currentTime);\n              if (!_hasMoreWork) {\n                scheduledHostCallback = null;\n              }\n            } catch (error) {\n              // If a scheduler task throws, exit the current browser task so the\n              // error can be observed, and post a new task as soon as possible\n              // so we can continue where we left off.\n              port.postMessage(null);\n              throw error;\n            }\n          } // Yielding to the browser will give it a chance to paint, so we can\n          // reset this.\n\n          needsPaint = false;\n        }\n      };\n      var channel = new MessageChannel();\n      var port = channel.port2;\n      channel.port1.onmessage = performWorkUntilDeadline;\n      var onAnimationFrame = function (rAFTime) {\n        if (scheduledHostCallback === null) {\n          // No scheduled work. Exit.\n          prevRAFTime = -1;\n          prevRAFInterval = -1;\n          isRAFLoopRunning = false;\n          return;\n        } // Eagerly schedule the next animation callback at the beginning of the\n        // frame. If the scheduler queue is not empty at the end of the frame, it\n        // will continue flushing inside that callback. If the queue *is* empty,\n        // then it will exit immediately. Posting the callback at the start of the\n        // frame ensures it's fired within the earliest possible frame. If we\n        // waited until the end of the frame to post the callback, we risk the\n        // browser skipping a frame and not firing the callback until the frame\n        // after that.\n\n        isRAFLoopRunning = true;\n        requestAnimationFrame(function (nextRAFTime) {\n          _clearTimeout(rAFTimeoutID);\n          onAnimationFrame(nextRAFTime);\n        }); // requestAnimationFrame is throttled when the tab is backgrounded. We\n        // don't want to stop working entirely. So we'll fallback to a timeout loop.\n        // TODO: Need a better heuristic for backgrounded work.\n\n        var onTimeout = function () {\n          frameDeadline = exports.unstable_now() + frameLength / 2;\n          performWorkUntilDeadline();\n          rAFTimeoutID = _setTimeout(onTimeout, frameLength * 3);\n        };\n        rAFTimeoutID = _setTimeout(onTimeout, frameLength * 3);\n        if (prevRAFTime !== -1 &&\n        // Make sure this rAF time is different from the previous one. This check\n        // could fail if two rAFs fire in the same frame.\n        rAFTime - prevRAFTime > 0.1) {\n          var rAFInterval = rAFTime - prevRAFTime;\n          if (!fpsLocked && prevRAFInterval !== -1) {\n            // We've observed two consecutive frame intervals. We'll use this to\n            // dynamically adjust the frame rate.\n            //\n            // If one frame goes long, then the next one can be short to catch up.\n            // If two frames are short in a row, then that's an indication that we\n            // actually have a higher frame rate than what we're currently\n            // optimizing. For example, if we're running on 120hz display or 90hz VR\n            // display. Take the max of the two in case one of them was an anomaly\n            // due to missed frame deadlines.\n            if (rAFInterval < frameLength && prevRAFInterval < frameLength) {\n              frameLength = rAFInterval < prevRAFInterval ? prevRAFInterval : rAFInterval;\n              if (frameLength < 8.33) {\n                // Defensive coding. We don't support higher frame rates than 120hz.\n                // If the calculated frame length gets lower than 8, it is probably\n                // a bug.\n                frameLength = 8.33;\n              }\n            }\n          }\n          prevRAFInterval = rAFInterval;\n        }\n        prevRAFTime = rAFTime;\n        frameDeadline = rAFTime + frameLength; // We use the postMessage trick to defer idle work until after the repaint.\n\n        port.postMessage(null);\n      };\n      requestHostCallback = function (callback) {\n        scheduledHostCallback = callback;\n        if (enableMessageLoopImplementation) {\n          if (!isMessageLoopRunning) {\n            isMessageLoopRunning = true;\n            port.postMessage(null);\n          }\n        } else {\n          if (!isRAFLoopRunning) {\n            // Start a rAF loop.\n            isRAFLoopRunning = true;\n            requestAnimationFrame(function (rAFTime) {\n              onAnimationFrame(rAFTime);\n            });\n          }\n        }\n      };\n      requestHostTimeout = function (callback, ms) {\n        taskTimeoutID = _setTimeout(function () {\n          callback(exports.unstable_now());\n        }, ms);\n      };\n      cancelHostTimeout = function () {\n        _clearTimeout(taskTimeoutID);\n        taskTimeoutID = -1;\n      };\n    }\n    function push(heap, node) {\n      var index = heap.length;\n      heap.push(node);\n      siftUp(heap, node, index);\n    }\n    function peek(heap) {\n      var first = heap[0];\n      return first === undefined ? null : first;\n    }\n    function pop(heap) {\n      var first = heap[0];\n      if (first !== undefined) {\n        var last = heap.pop();\n        if (last !== first) {\n          heap[0] = last;\n          siftDown(heap, last, 0);\n        }\n        return first;\n      } else {\n        return null;\n      }\n    }\n    function siftUp(heap, node, i) {\n      var index = i;\n      while (true) {\n        var parentIndex = Math.floor((index - 1) / 2);\n        var parent = heap[parentIndex];\n        if (parent !== undefined && compare(parent, node) > 0) {\n          // The parent is larger. Swap positions.\n          heap[parentIndex] = node;\n          heap[index] = parent;\n          index = parentIndex;\n        } else {\n          // The parent is smaller. Exit.\n          return;\n        }\n      }\n    }\n    function siftDown(heap, node, i) {\n      var index = i;\n      var length = heap.length;\n      while (index < length) {\n        var leftIndex = (index + 1) * 2 - 1;\n        var left = heap[leftIndex];\n        var rightIndex = leftIndex + 1;\n        var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n        if (left !== undefined && compare(left, node) < 0) {\n          if (right !== undefined && compare(right, left) < 0) {\n            heap[index] = right;\n            heap[rightIndex] = node;\n            index = rightIndex;\n          } else {\n            heap[index] = left;\n            heap[leftIndex] = node;\n            index = leftIndex;\n          }\n        } else if (right !== undefined && compare(right, node) < 0) {\n          heap[index] = right;\n          heap[rightIndex] = node;\n          index = rightIndex;\n        } else {\n          // Neither child is smaller. Exit.\n          return;\n        }\n      }\n    }\n    function compare(a, b) {\n      // Compare sort index first, then task id.\n      var diff = a.sortIndex - b.sortIndex;\n      return diff !== 0 ? diff : a.id - b.id;\n    }\n\n    // TODO: Use symbols?\n    var NoPriority = 0;\n    var ImmediatePriority = 1;\n    var UserBlockingPriority = 2;\n    var NormalPriority = 3;\n    var LowPriority = 4;\n    var IdlePriority = 5;\n    var runIdCounter = 0;\n    var mainThreadIdCounter = 0;\n    var profilingStateSize = 4;\n    var sharedProfilingBuffer = enableProfiling ?\n    // $FlowFixMe Flow doesn't know about SharedArrayBuffer\n    typeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) :\n    // $FlowFixMe Flow doesn't know about ArrayBuffer\n    typeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9\n    : null;\n    var profilingState = enableProfiling && sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks\n\n    var PRIORITY = 0;\n    var CURRENT_TASK_ID = 1;\n    var CURRENT_RUN_ID = 2;\n    var QUEUE_SIZE = 3;\n    if (enableProfiling) {\n      profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue\n      // array might include canceled tasks.\n\n      profilingState[QUEUE_SIZE] = 0;\n      profilingState[CURRENT_TASK_ID] = 0;\n    } // Bytes per element is 4\n\n    var INITIAL_EVENT_LOG_SIZE = 131072;\n    var MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes\n\n    var eventLogSize = 0;\n    var eventLogBuffer = null;\n    var eventLog = null;\n    var eventLogIndex = 0;\n    var TaskStartEvent = 1;\n    var TaskCompleteEvent = 2;\n    var TaskErrorEvent = 3;\n    var TaskCancelEvent = 4;\n    var TaskRunEvent = 5;\n    var TaskYieldEvent = 6;\n    var SchedulerSuspendEvent = 7;\n    var SchedulerResumeEvent = 8;\n    function logEvent(entries) {\n      if (eventLog !== null) {\n        var offset = eventLogIndex;\n        eventLogIndex += entries.length;\n        if (eventLogIndex + 1 > eventLogSize) {\n          eventLogSize *= 2;\n          if (eventLogSize > MAX_EVENT_LOG_SIZE) {\n            console.error(\"Scheduler Profiling: Event log exceeded maximum size. Don't \" + 'forget to call `stopLoggingProfilingEvents()`.');\n            stopLoggingProfilingEvents();\n            return;\n          }\n          var newEventLog = new Int32Array(eventLogSize * 4);\n          newEventLog.set(eventLog);\n          eventLogBuffer = newEventLog.buffer;\n          eventLog = newEventLog;\n        }\n        eventLog.set(entries, offset);\n      }\n    }\n    function startLoggingProfilingEvents() {\n      eventLogSize = INITIAL_EVENT_LOG_SIZE;\n      eventLogBuffer = new ArrayBuffer(eventLogSize * 4);\n      eventLog = new Int32Array(eventLogBuffer);\n      eventLogIndex = 0;\n    }\n    function stopLoggingProfilingEvents() {\n      var buffer = eventLogBuffer;\n      eventLogSize = 0;\n      eventLogBuffer = null;\n      eventLog = null;\n      eventLogIndex = 0;\n      return buffer;\n    }\n    function markTaskStart(task, ms) {\n      if (enableProfiling) {\n        profilingState[QUEUE_SIZE]++;\n        if (eventLog !== null) {\n          // performance.now returns a float, representing milliseconds. When the\n          // event is logged, it's coerced to an int. Convert to microseconds to\n          // maintain extra degrees of precision.\n          logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);\n        }\n      }\n    }\n    function markTaskCompleted(task, ms) {\n      if (enableProfiling) {\n        profilingState[PRIORITY] = NoPriority;\n        profilingState[CURRENT_TASK_ID] = 0;\n        profilingState[QUEUE_SIZE]--;\n        if (eventLog !== null) {\n          logEvent([TaskCompleteEvent, ms * 1000, task.id]);\n        }\n      }\n    }\n    function markTaskCanceled(task, ms) {\n      if (enableProfiling) {\n        profilingState[QUEUE_SIZE]--;\n        if (eventLog !== null) {\n          logEvent([TaskCancelEvent, ms * 1000, task.id]);\n        }\n      }\n    }\n    function markTaskErrored(task, ms) {\n      if (enableProfiling) {\n        profilingState[PRIORITY] = NoPriority;\n        profilingState[CURRENT_TASK_ID] = 0;\n        profilingState[QUEUE_SIZE]--;\n        if (eventLog !== null) {\n          logEvent([TaskErrorEvent, ms * 1000, task.id]);\n        }\n      }\n    }\n    function markTaskRun(task, ms) {\n      if (enableProfiling) {\n        runIdCounter++;\n        profilingState[PRIORITY] = task.priorityLevel;\n        profilingState[CURRENT_TASK_ID] = task.id;\n        profilingState[CURRENT_RUN_ID] = runIdCounter;\n        if (eventLog !== null) {\n          logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);\n        }\n      }\n    }\n    function markTaskYield(task, ms) {\n      if (enableProfiling) {\n        profilingState[PRIORITY] = NoPriority;\n        profilingState[CURRENT_TASK_ID] = 0;\n        profilingState[CURRENT_RUN_ID] = 0;\n        if (eventLog !== null) {\n          logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);\n        }\n      }\n    }\n    function markSchedulerSuspended(ms) {\n      if (enableProfiling) {\n        mainThreadIdCounter++;\n        if (eventLog !== null) {\n          logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);\n        }\n      }\n    }\n    function markSchedulerUnsuspended(ms) {\n      if (enableProfiling) {\n        if (eventLog !== null) {\n          logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);\n        }\n      }\n    }\n\n    /* eslint-disable no-var */\n    // Math.pow(2, 30) - 1\n    // 0b111111111111111111111111111111\n\n    var maxSigned31BitInt = 1073741823; // Times out immediately\n\n    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\n    var USER_BLOCKING_PRIORITY = 250;\n    var NORMAL_PRIORITY_TIMEOUT = 5000;\n    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\n    var IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap\n\n    var taskQueue = [];\n    var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\n    var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\n\n    var isSchedulerPaused = false;\n    var currentTask = null;\n    var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.\n\n    var isPerformingWork = false;\n    var isHostCallbackScheduled = false;\n    var isHostTimeoutScheduled = false;\n    function advanceTimers(currentTime) {\n      // Check for tasks that are no longer delayed and add them to the queue.\n      var timer = peek(timerQueue);\n      while (timer !== null) {\n        if (timer.callback === null) {\n          // Timer was cancelled.\n          pop(timerQueue);\n        } else if (timer.startTime <= currentTime) {\n          // Timer fired. Transfer to the task queue.\n          pop(timerQueue);\n          timer.sortIndex = timer.expirationTime;\n          push(taskQueue, timer);\n          if (enableProfiling) {\n            markTaskStart(timer, currentTime);\n            timer.isQueued = true;\n          }\n        } else {\n          // Remaining timers are pending.\n          return;\n        }\n        timer = peek(timerQueue);\n      }\n    }\n    function handleTimeout(currentTime) {\n      isHostTimeoutScheduled = false;\n      advanceTimers(currentTime);\n      if (!isHostCallbackScheduled) {\n        if (peek(taskQueue) !== null) {\n          isHostCallbackScheduled = true;\n          requestHostCallback(flushWork);\n        } else {\n          var firstTimer = peek(timerQueue);\n          if (firstTimer !== null) {\n            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n          }\n        }\n      }\n    }\n    function flushWork(hasTimeRemaining, initialTime) {\n      if (enableProfiling) {\n        markSchedulerUnsuspended(initialTime);\n      } // We'll need a host callback the next time work is scheduled.\n\n      isHostCallbackScheduled = false;\n      if (isHostTimeoutScheduled) {\n        // We scheduled a timeout but it's no longer needed. Cancel it.\n        isHostTimeoutScheduled = false;\n        cancelHostTimeout();\n      }\n      isPerformingWork = true;\n      var previousPriorityLevel = currentPriorityLevel;\n      try {\n        if (enableProfiling) {\n          try {\n            return workLoop(hasTimeRemaining, initialTime);\n          } catch (error) {\n            if (currentTask !== null) {\n              var currentTime = exports.unstable_now();\n              markTaskErrored(currentTask, currentTime);\n              currentTask.isQueued = false;\n            }\n            throw error;\n          }\n        } else {\n          // No catch in prod codepath.\n          return workLoop(hasTimeRemaining, initialTime);\n        }\n      } finally {\n        currentTask = null;\n        currentPriorityLevel = previousPriorityLevel;\n        isPerformingWork = false;\n        if (enableProfiling) {\n          var _currentTime = exports.unstable_now();\n          markSchedulerSuspended(_currentTime);\n        }\n      }\n    }\n    function workLoop(hasTimeRemaining, initialTime) {\n      var currentTime = initialTime;\n      advanceTimers(currentTime);\n      currentTask = peek(taskQueue);\n      while (currentTask !== null && !(enableSchedulerDebugging && isSchedulerPaused)) {\n        if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n          // This currentTask hasn't expired, and we've reached the deadline.\n          break;\n        }\n        var callback = currentTask.callback;\n        if (callback !== null) {\n          currentTask.callback = null;\n          currentPriorityLevel = currentTask.priorityLevel;\n          var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n          markTaskRun(currentTask, currentTime);\n          var continuationCallback = callback(didUserCallbackTimeout);\n          currentTime = exports.unstable_now();\n          if (typeof continuationCallback === 'function') {\n            currentTask.callback = continuationCallback;\n            markTaskYield(currentTask, currentTime);\n          } else {\n            if (enableProfiling) {\n              markTaskCompleted(currentTask, currentTime);\n              currentTask.isQueued = false;\n            }\n            if (currentTask === peek(taskQueue)) {\n              pop(taskQueue);\n            }\n          }\n          advanceTimers(currentTime);\n        } else {\n          pop(taskQueue);\n        }\n        currentTask = peek(taskQueue);\n      } // Return whether there's additional work\n\n      if (currentTask !== null) {\n        return true;\n      } else {\n        var firstTimer = peek(timerQueue);\n        if (firstTimer !== null) {\n          requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n        }\n        return false;\n      }\n    }\n    function unstable_runWithPriority(priorityLevel, eventHandler) {\n      switch (priorityLevel) {\n        case ImmediatePriority:\n        case UserBlockingPriority:\n        case NormalPriority:\n        case LowPriority:\n        case IdlePriority:\n          break;\n        default:\n          priorityLevel = NormalPriority;\n      }\n      var previousPriorityLevel = currentPriorityLevel;\n      currentPriorityLevel = priorityLevel;\n      try {\n        return eventHandler();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n      }\n    }\n    function unstable_next(eventHandler) {\n      var priorityLevel;\n      switch (currentPriorityLevel) {\n        case ImmediatePriority:\n        case UserBlockingPriority:\n        case NormalPriority:\n          // Shift down to normal priority\n          priorityLevel = NormalPriority;\n          break;\n        default:\n          // Anything lower than normal priority should remain at the current level.\n          priorityLevel = currentPriorityLevel;\n          break;\n      }\n      var previousPriorityLevel = currentPriorityLevel;\n      currentPriorityLevel = priorityLevel;\n      try {\n        return eventHandler();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n      }\n    }\n    function unstable_wrapCallback(callback) {\n      var parentPriorityLevel = currentPriorityLevel;\n      return function () {\n        // This is a fork of runWithPriority, inlined for performance.\n        var previousPriorityLevel = currentPriorityLevel;\n        currentPriorityLevel = parentPriorityLevel;\n        try {\n          return callback.apply(this, arguments);\n        } finally {\n          currentPriorityLevel = previousPriorityLevel;\n        }\n      };\n    }\n    function timeoutForPriorityLevel(priorityLevel) {\n      switch (priorityLevel) {\n        case ImmediatePriority:\n          return IMMEDIATE_PRIORITY_TIMEOUT;\n        case UserBlockingPriority:\n          return USER_BLOCKING_PRIORITY;\n        case IdlePriority:\n          return IDLE_PRIORITY;\n        case LowPriority:\n          return LOW_PRIORITY_TIMEOUT;\n        case NormalPriority:\n        default:\n          return NORMAL_PRIORITY_TIMEOUT;\n      }\n    }\n    function unstable_scheduleCallback(priorityLevel, callback, options) {\n      var currentTime = exports.unstable_now();\n      var startTime;\n      var timeout;\n      if (typeof options === 'object' && options !== null) {\n        var delay = options.delay;\n        if (typeof delay === 'number' && delay > 0) {\n          startTime = currentTime + delay;\n        } else {\n          startTime = currentTime;\n        }\n        timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);\n      } else {\n        timeout = timeoutForPriorityLevel(priorityLevel);\n        startTime = currentTime;\n      }\n      var expirationTime = startTime + timeout;\n      var newTask = {\n        id: taskIdCounter++,\n        callback: callback,\n        priorityLevel: priorityLevel,\n        startTime: startTime,\n        expirationTime: expirationTime,\n        sortIndex: -1\n      };\n      if (enableProfiling) {\n        newTask.isQueued = false;\n      }\n      if (startTime > currentTime) {\n        // This is a delayed task.\n        newTask.sortIndex = startTime;\n        push(timerQueue, newTask);\n        if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n          // All tasks are delayed, and this is the task with the earliest delay.\n          if (isHostTimeoutScheduled) {\n            // Cancel an existing timeout.\n            cancelHostTimeout();\n          } else {\n            isHostTimeoutScheduled = true;\n          } // Schedule a timeout.\n\n          requestHostTimeout(handleTimeout, startTime - currentTime);\n        }\n      } else {\n        newTask.sortIndex = expirationTime;\n        push(taskQueue, newTask);\n        if (enableProfiling) {\n          markTaskStart(newTask, currentTime);\n          newTask.isQueued = true;\n        } // Schedule a host callback, if needed. If we're already performing work,\n        // wait until the next time we yield.\n\n        if (!isHostCallbackScheduled && !isPerformingWork) {\n          isHostCallbackScheduled = true;\n          requestHostCallback(flushWork);\n        }\n      }\n      return newTask;\n    }\n    function unstable_pauseExecution() {\n      isSchedulerPaused = true;\n    }\n    function unstable_continueExecution() {\n      isSchedulerPaused = false;\n      if (!isHostCallbackScheduled && !isPerformingWork) {\n        isHostCallbackScheduled = true;\n        requestHostCallback(flushWork);\n      }\n    }\n    function unstable_getFirstCallbackNode() {\n      return peek(taskQueue);\n    }\n    function unstable_cancelCallback(task) {\n      if (enableProfiling) {\n        if (task.isQueued) {\n          var currentTime = exports.unstable_now();\n          markTaskCanceled(task, currentTime);\n          task.isQueued = false;\n        }\n      } // Null out the callback to indicate the task has been canceled. (Can't\n      // remove from the queue because you can't remove arbitrary nodes from an\n      // array based heap, only the first one.)\n\n      task.callback = null;\n    }\n    function unstable_getCurrentPriorityLevel() {\n      return currentPriorityLevel;\n    }\n    function unstable_shouldYield() {\n      var currentTime = exports.unstable_now();\n      advanceTimers(currentTime);\n      var firstTask = peek(taskQueue);\n      return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();\n    }\n    var unstable_requestPaint = requestPaint;\n    var unstable_Profiling = enableProfiling ? {\n      startLoggingProfilingEvents: startLoggingProfilingEvents,\n      stopLoggingProfilingEvents: stopLoggingProfilingEvents,\n      sharedProfilingBuffer: sharedProfilingBuffer\n    } : null;\n    exports.unstable_ImmediatePriority = ImmediatePriority;\n    exports.unstable_UserBlockingPriority = UserBlockingPriority;\n    exports.unstable_NormalPriority = NormalPriority;\n    exports.unstable_IdlePriority = IdlePriority;\n    exports.unstable_LowPriority = LowPriority;\n    exports.unstable_runWithPriority = unstable_runWithPriority;\n    exports.unstable_next = unstable_next;\n    exports.unstable_scheduleCallback = unstable_scheduleCallback;\n    exports.unstable_cancelCallback = unstable_cancelCallback;\n    exports.unstable_wrapCallback = unstable_wrapCallback;\n    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\n    exports.unstable_shouldYield = unstable_shouldYield;\n    exports.unstable_requestPaint = unstable_requestPaint;\n    exports.unstable_continueExecution = unstable_continueExecution;\n    exports.unstable_pauseExecution = unstable_pauseExecution;\n    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\n    exports.unstable_Profiling = unstable_Profiling;\n  })();\n}","map":{"version":3,"names":["process","env","NODE_ENV","Object","defineProperty","exports","value","enableSchedulerDebugging","enableIsInputPending","enableMessageLoopImplementation","enableProfiling","requestHostCallback","requestHostTimeout","cancelHostTimeout","shouldYieldToHost","requestPaint","window","MessageChannel","_callback","_timeoutID","_flushCallback","currentTime","unstable_now","hasRemainingTime","e","setTimeout","initialTime","Date","now","cb","ms","clearTimeout","unstable_forceFrameRate","performance","_Date","_setTimeout","_clearTimeout","requestAnimationFrame","cancelAnimationFrame","console","error","_initialTime","isRAFLoopRunning","isMessageLoopRunning","scheduledHostCallback","rAFTimeoutID","taskTimeoutID","frameLength","prevRAFTime","prevRAFInterval","frameDeadline","fpsLocked","maxFrameLength","needsPaint","navigator","undefined","scheduling","isInputPending","fps","Math","floor","performWorkUntilDeadline","hasTimeRemaining","hasMoreWork","port","postMessage","_currentTime","_hasTimeRemaining","_hasMoreWork","channel","port2","port1","onmessage","onAnimationFrame","rAFTime","nextRAFTime","onTimeout","rAFInterval","callback","push","heap","node","index","length","siftUp","peek","first","pop","last","siftDown","i","parentIndex","parent","compare","leftIndex","left","rightIndex","right","a","b","diff","sortIndex","id","NoPriority","ImmediatePriority","UserBlockingPriority","NormalPriority","LowPriority","IdlePriority","runIdCounter","mainThreadIdCounter","profilingStateSize","sharedProfilingBuffer","SharedArrayBuffer","Int32Array","BYTES_PER_ELEMENT","ArrayBuffer","profilingState","PRIORITY","CURRENT_TASK_ID","CURRENT_RUN_ID","QUEUE_SIZE","INITIAL_EVENT_LOG_SIZE","MAX_EVENT_LOG_SIZE","eventLogSize","eventLogBuffer","eventLog","eventLogIndex","TaskStartEvent","TaskCompleteEvent","TaskErrorEvent","TaskCancelEvent","TaskRunEvent","TaskYieldEvent","SchedulerSuspendEvent","SchedulerResumeEvent","logEvent","entries","offset","stopLoggingProfilingEvents","newEventLog","set","buffer","startLoggingProfilingEvents","markTaskStart","task","priorityLevel","markTaskCompleted","markTaskCanceled","markTaskErrored","markTaskRun","markTaskYield","markSchedulerSuspended","markSchedulerUnsuspended","maxSigned31BitInt","IMMEDIATE_PRIORITY_TIMEOUT","USER_BLOCKING_PRIORITY","NORMAL_PRIORITY_TIMEOUT","LOW_PRIORITY_TIMEOUT","IDLE_PRIORITY","taskQueue","timerQueue","taskIdCounter","isSchedulerPaused","currentTask","currentPriorityLevel","isPerformingWork","isHostCallbackScheduled","isHostTimeoutScheduled","advanceTimers","timer","startTime","expirationTime","isQueued","handleTimeout","flushWork","firstTimer","previousPriorityLevel","workLoop","didUserCallbackTimeout","continuationCallback","unstable_runWithPriority","eventHandler","unstable_next","unstable_wrapCallback","parentPriorityLevel","apply","arguments","timeoutForPriorityLevel","unstable_scheduleCallback","options","timeout","delay","newTask","unstable_pauseExecution","unstable_continueExecution","unstable_getFirstCallbackNode","unstable_cancelCallback","unstable_getCurrentPriorityLevel","unstable_shouldYield","firstTask","unstable_requestPaint","unstable_Profiling","unstable_ImmediatePriority","unstable_UserBlockingPriority","unstable_NormalPriority","unstable_IdlePriority","unstable_LowPriority"],"sources":["C:/Users/Abdullah/Desktop/Project/TTP-Project/client/node_modules/@react-pdf/renderer/node_modules/scheduler/cjs/scheduler.development.js"],"sourcesContent":["/** @license React v0.17.0\n * scheduler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar enableSchedulerDebugging = false;\nvar enableIsInputPending = false;\nvar enableMessageLoopImplementation = true;\nvar enableProfiling = true;\n\n// works by scheduling a requestAnimationFrame, storing the time for the start\n// of the frame, then scheduling a postMessage which gets scheduled after paint.\n// Within the postMessage handler do as much work as possible until time + frame\n// rate. By separating the idle call into a separate event tick we ensure that\n// layout, paint and other browser work is counted against the available time.\n// The frame rate is dynamically adjusted.\n\nvar requestHostCallback;\n\nvar requestHostTimeout;\nvar cancelHostTimeout;\nvar shouldYieldToHost;\nvar requestPaint;\n\n\n\nif ( // If Scheduler runs in a non-DOM environment, it falls back to a naive\n// implementation using setTimeout.\ntypeof window === 'undefined' || // Check if MessageChannel is supported, too.\ntypeof MessageChannel !== 'function') {\n  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,\n  // fallback to a naive implementation.\n  var _callback = null;\n  var _timeoutID = null;\n\n  var _flushCallback = function () {\n    if (_callback !== null) {\n      try {\n        var currentTime = exports.unstable_now();\n        var hasRemainingTime = true;\n\n        _callback(hasRemainingTime, currentTime);\n\n        _callback = null;\n      } catch (e) {\n        setTimeout(_flushCallback, 0);\n        throw e;\n      }\n    }\n  };\n\n  var initialTime = Date.now();\n\n  exports.unstable_now = function () {\n    return Date.now() - initialTime;\n  };\n\n  requestHostCallback = function (cb) {\n    if (_callback !== null) {\n      // Protect against re-entrancy.\n      setTimeout(requestHostCallback, 0, cb);\n    } else {\n      _callback = cb;\n      setTimeout(_flushCallback, 0);\n    }\n  };\n\n  requestHostTimeout = function (cb, ms) {\n    _timeoutID = setTimeout(cb, ms);\n  };\n\n  cancelHostTimeout = function () {\n    clearTimeout(_timeoutID);\n  };\n\n  shouldYieldToHost = function () {\n    return false;\n  };\n\n  requestPaint = exports.unstable_forceFrameRate = function () {};\n} else {\n  // Capture local references to native APIs, in case a polyfill overrides them.\n  var performance = window.performance;\n  var _Date = window.Date;\n  var _setTimeout = window.setTimeout;\n  var _clearTimeout = window.clearTimeout;\n  var requestAnimationFrame = window.requestAnimationFrame;\n  var cancelAnimationFrame = window.cancelAnimationFrame;\n\n  if (typeof console !== 'undefined') {\n    // TODO: Remove fb.me link\n    if (typeof requestAnimationFrame !== 'function') {\n      console.error(\"This browser doesn't support requestAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n    }\n\n    if (typeof cancelAnimationFrame !== 'function') {\n      console.error(\"This browser doesn't support cancelAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n    }\n  }\n\n  if (typeof performance === 'object' && typeof performance.now === 'function') {\n    exports.unstable_now = function () {\n      return performance.now();\n    };\n  } else {\n    var _initialTime = _Date.now();\n\n    exports.unstable_now = function () {\n      return _Date.now() - _initialTime;\n    };\n  }\n\n  var isRAFLoopRunning = false;\n  var isMessageLoopRunning = false;\n  var scheduledHostCallback = null;\n  var rAFTimeoutID = -1;\n  var taskTimeoutID = -1;\n  var frameLength = enableMessageLoopImplementation ? // We won't attempt to align with the vsync. Instead we'll yield multiple\n  // times per frame, often enough to keep it responsive even at really\n  // high frame rates > 120.\n  5 : // Use a heuristic to measure the frame rate and yield at the end of the\n  // frame. We start out assuming that we run at 30fps but then the\n  // heuristic tracking will adjust this value to a faster fps if we get\n  // more frequent animation frames.\n  33.33;\n  var prevRAFTime = -1;\n  var prevRAFInterval = -1;\n  var frameDeadline = 0;\n  var fpsLocked = false; // TODO: Make this configurable\n  // TODO: Adjust this based on priority?\n\n  var maxFrameLength = 300;\n  var needsPaint = false;\n\n  if (enableIsInputPending && navigator !== undefined && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined) {\n    var scheduling = navigator.scheduling;\n\n    shouldYieldToHost = function () {\n      var currentTime = exports.unstable_now();\n\n      if (currentTime >= frameDeadline) {\n        // There's no time left in the frame. We may want to yield control of\n        // the main thread, so the browser can perform high priority tasks. The\n        // main ones are painting and user input. If there's a pending paint or\n        // a pending input, then we should yield. But if there's neither, then\n        // we can yield less often while remaining responsive. We'll eventually\n        // yield regardless, since there could be a pending paint that wasn't\n        // accompanied by a call to `requestPaint`, or other main thread tasks\n        // like network events.\n        if (needsPaint || scheduling.isInputPending()) {\n          // There is either a pending paint or a pending input.\n          return true;\n        } // There's no pending input. Only yield if we've reached the max\n        // frame length.\n\n\n        return currentTime >= frameDeadline + maxFrameLength;\n      } else {\n        // There's still time left in the frame.\n        return false;\n      }\n    };\n\n    requestPaint = function () {\n      needsPaint = true;\n    };\n  } else {\n    // `isInputPending` is not available. Since we have no way of knowing if\n    // there's pending input, always yield at the end of the frame.\n    shouldYieldToHost = function () {\n      return exports.unstable_now() >= frameDeadline;\n    }; // Since we yield every frame regardless, `requestPaint` has no effect.\n\n\n    requestPaint = function () {};\n  }\n\n  exports.unstable_forceFrameRate = function (fps) {\n    if (fps < 0 || fps > 125) {\n      console.error('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');\n      return;\n    }\n\n    if (fps > 0) {\n      frameLength = Math.floor(1000 / fps);\n      fpsLocked = true;\n    } else {\n      // reset the framerate\n      frameLength = 33.33;\n      fpsLocked = false;\n    }\n  };\n\n  var performWorkUntilDeadline = function () {\n    if (enableMessageLoopImplementation) {\n      if (scheduledHostCallback !== null) {\n        var currentTime = exports.unstable_now(); // Yield after `frameLength` ms, regardless of where we are in the vsync\n        // cycle. This means there's always time remaining at the beginning of\n        // the message event.\n\n        frameDeadline = currentTime + frameLength;\n        var hasTimeRemaining = true;\n\n        try {\n          var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n\n          if (!hasMoreWork) {\n            isMessageLoopRunning = false;\n            scheduledHostCallback = null;\n          } else {\n            // If there's more work, schedule the next message event at the end\n            // of the preceding one.\n            port.postMessage(null);\n          }\n        } catch (error) {\n          // If a scheduler task throws, exit the current browser task so the\n          // error can be observed.\n          port.postMessage(null);\n          throw error;\n        }\n      } else {\n        isMessageLoopRunning = false;\n      } // Yielding to the browser will give it a chance to paint, so we can\n      // reset this.\n\n\n      needsPaint = false;\n    } else {\n      if (scheduledHostCallback !== null) {\n        var _currentTime = exports.unstable_now();\n\n        var _hasTimeRemaining = frameDeadline - _currentTime > 0;\n\n        try {\n          var _hasMoreWork = scheduledHostCallback(_hasTimeRemaining, _currentTime);\n\n          if (!_hasMoreWork) {\n            scheduledHostCallback = null;\n          }\n        } catch (error) {\n          // If a scheduler task throws, exit the current browser task so the\n          // error can be observed, and post a new task as soon as possible\n          // so we can continue where we left off.\n          port.postMessage(null);\n          throw error;\n        }\n      } // Yielding to the browser will give it a chance to paint, so we can\n      // reset this.\n\n\n      needsPaint = false;\n    }\n  };\n\n  var channel = new MessageChannel();\n  var port = channel.port2;\n  channel.port1.onmessage = performWorkUntilDeadline;\n\n  var onAnimationFrame = function (rAFTime) {\n    if (scheduledHostCallback === null) {\n      // No scheduled work. Exit.\n      prevRAFTime = -1;\n      prevRAFInterval = -1;\n      isRAFLoopRunning = false;\n      return;\n    } // Eagerly schedule the next animation callback at the beginning of the\n    // frame. If the scheduler queue is not empty at the end of the frame, it\n    // will continue flushing inside that callback. If the queue *is* empty,\n    // then it will exit immediately. Posting the callback at the start of the\n    // frame ensures it's fired within the earliest possible frame. If we\n    // waited until the end of the frame to post the callback, we risk the\n    // browser skipping a frame and not firing the callback until the frame\n    // after that.\n\n\n    isRAFLoopRunning = true;\n    requestAnimationFrame(function (nextRAFTime) {\n      _clearTimeout(rAFTimeoutID);\n\n      onAnimationFrame(nextRAFTime);\n    }); // requestAnimationFrame is throttled when the tab is backgrounded. We\n    // don't want to stop working entirely. So we'll fallback to a timeout loop.\n    // TODO: Need a better heuristic for backgrounded work.\n\n    var onTimeout = function () {\n      frameDeadline = exports.unstable_now() + frameLength / 2;\n      performWorkUntilDeadline();\n      rAFTimeoutID = _setTimeout(onTimeout, frameLength * 3);\n    };\n\n    rAFTimeoutID = _setTimeout(onTimeout, frameLength * 3);\n\n    if (prevRAFTime !== -1 && // Make sure this rAF time is different from the previous one. This check\n    // could fail if two rAFs fire in the same frame.\n    rAFTime - prevRAFTime > 0.1) {\n      var rAFInterval = rAFTime - prevRAFTime;\n\n      if (!fpsLocked && prevRAFInterval !== -1) {\n        // We've observed two consecutive frame intervals. We'll use this to\n        // dynamically adjust the frame rate.\n        //\n        // If one frame goes long, then the next one can be short to catch up.\n        // If two frames are short in a row, then that's an indication that we\n        // actually have a higher frame rate than what we're currently\n        // optimizing. For example, if we're running on 120hz display or 90hz VR\n        // display. Take the max of the two in case one of them was an anomaly\n        // due to missed frame deadlines.\n        if (rAFInterval < frameLength && prevRAFInterval < frameLength) {\n          frameLength = rAFInterval < prevRAFInterval ? prevRAFInterval : rAFInterval;\n\n          if (frameLength < 8.33) {\n            // Defensive coding. We don't support higher frame rates than 120hz.\n            // If the calculated frame length gets lower than 8, it is probably\n            // a bug.\n            frameLength = 8.33;\n          }\n        }\n      }\n\n      prevRAFInterval = rAFInterval;\n    }\n\n    prevRAFTime = rAFTime;\n    frameDeadline = rAFTime + frameLength; // We use the postMessage trick to defer idle work until after the repaint.\n\n    port.postMessage(null);\n  };\n\n  requestHostCallback = function (callback) {\n    scheduledHostCallback = callback;\n\n    if (enableMessageLoopImplementation) {\n      if (!isMessageLoopRunning) {\n        isMessageLoopRunning = true;\n        port.postMessage(null);\n      }\n    } else {\n      if (!isRAFLoopRunning) {\n        // Start a rAF loop.\n        isRAFLoopRunning = true;\n        requestAnimationFrame(function (rAFTime) {\n          onAnimationFrame(rAFTime);\n        });\n      }\n    }\n  };\n\n  requestHostTimeout = function (callback, ms) {\n    taskTimeoutID = _setTimeout(function () {\n      callback(exports.unstable_now());\n    }, ms);\n  };\n\n  cancelHostTimeout = function () {\n    _clearTimeout(taskTimeoutID);\n\n    taskTimeoutID = -1;\n  };\n}\n\nfunction push(heap, node) {\n  var index = heap.length;\n  heap.push(node);\n  siftUp(heap, node, index);\n}\nfunction peek(heap) {\n  var first = heap[0];\n  return first === undefined ? null : first;\n}\nfunction pop(heap) {\n  var first = heap[0];\n\n  if (first !== undefined) {\n    var last = heap.pop();\n\n    if (last !== first) {\n      heap[0] = last;\n      siftDown(heap, last, 0);\n    }\n\n    return first;\n  } else {\n    return null;\n  }\n}\n\nfunction siftUp(heap, node, i) {\n  var index = i;\n\n  while (true) {\n    var parentIndex = Math.floor((index - 1) / 2);\n    var parent = heap[parentIndex];\n\n    if (parent !== undefined && compare(parent, node) > 0) {\n      // The parent is larger. Swap positions.\n      heap[parentIndex] = node;\n      heap[index] = parent;\n      index = parentIndex;\n    } else {\n      // The parent is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction siftDown(heap, node, i) {\n  var index = i;\n  var length = heap.length;\n\n  while (index < length) {\n    var leftIndex = (index + 1) * 2 - 1;\n    var left = heap[leftIndex];\n    var rightIndex = leftIndex + 1;\n    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n    if (left !== undefined && compare(left, node) < 0) {\n      if (right !== undefined && compare(right, left) < 0) {\n        heap[index] = right;\n        heap[rightIndex] = node;\n        index = rightIndex;\n      } else {\n        heap[index] = left;\n        heap[leftIndex] = node;\n        index = leftIndex;\n      }\n    } else if (right !== undefined && compare(right, node) < 0) {\n      heap[index] = right;\n      heap[rightIndex] = node;\n      index = rightIndex;\n    } else {\n      // Neither child is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction compare(a, b) {\n  // Compare sort index first, then task id.\n  var diff = a.sortIndex - b.sortIndex;\n  return diff !== 0 ? diff : a.id - b.id;\n}\n\n// TODO: Use symbols?\nvar NoPriority = 0;\nvar ImmediatePriority = 1;\nvar UserBlockingPriority = 2;\nvar NormalPriority = 3;\nvar LowPriority = 4;\nvar IdlePriority = 5;\n\nvar runIdCounter = 0;\nvar mainThreadIdCounter = 0;\nvar profilingStateSize = 4;\nvar sharedProfilingBuffer = enableProfiling ? // $FlowFixMe Flow doesn't know about SharedArrayBuffer\ntypeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer\ntypeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9\n: null;\nvar profilingState = enableProfiling && sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks\n\nvar PRIORITY = 0;\nvar CURRENT_TASK_ID = 1;\nvar CURRENT_RUN_ID = 2;\nvar QUEUE_SIZE = 3;\n\nif (enableProfiling) {\n  profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue\n  // array might include canceled tasks.\n\n  profilingState[QUEUE_SIZE] = 0;\n  profilingState[CURRENT_TASK_ID] = 0;\n} // Bytes per element is 4\n\n\nvar INITIAL_EVENT_LOG_SIZE = 131072;\nvar MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes\n\nvar eventLogSize = 0;\nvar eventLogBuffer = null;\nvar eventLog = null;\nvar eventLogIndex = 0;\nvar TaskStartEvent = 1;\nvar TaskCompleteEvent = 2;\nvar TaskErrorEvent = 3;\nvar TaskCancelEvent = 4;\nvar TaskRunEvent = 5;\nvar TaskYieldEvent = 6;\nvar SchedulerSuspendEvent = 7;\nvar SchedulerResumeEvent = 8;\n\nfunction logEvent(entries) {\n  if (eventLog !== null) {\n    var offset = eventLogIndex;\n    eventLogIndex += entries.length;\n\n    if (eventLogIndex + 1 > eventLogSize) {\n      eventLogSize *= 2;\n\n      if (eventLogSize > MAX_EVENT_LOG_SIZE) {\n        console.error(\"Scheduler Profiling: Event log exceeded maximum size. Don't \" + 'forget to call `stopLoggingProfilingEvents()`.');\n        stopLoggingProfilingEvents();\n        return;\n      }\n\n      var newEventLog = new Int32Array(eventLogSize * 4);\n      newEventLog.set(eventLog);\n      eventLogBuffer = newEventLog.buffer;\n      eventLog = newEventLog;\n    }\n\n    eventLog.set(entries, offset);\n  }\n}\n\nfunction startLoggingProfilingEvents() {\n  eventLogSize = INITIAL_EVENT_LOG_SIZE;\n  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);\n  eventLog = new Int32Array(eventLogBuffer);\n  eventLogIndex = 0;\n}\nfunction stopLoggingProfilingEvents() {\n  var buffer = eventLogBuffer;\n  eventLogSize = 0;\n  eventLogBuffer = null;\n  eventLog = null;\n  eventLogIndex = 0;\n  return buffer;\n}\nfunction markTaskStart(task, ms) {\n  if (enableProfiling) {\n    profilingState[QUEUE_SIZE]++;\n\n    if (eventLog !== null) {\n      // performance.now returns a float, representing milliseconds. When the\n      // event is logged, it's coerced to an int. Convert to microseconds to\n      // maintain extra degrees of precision.\n      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);\n    }\n  }\n}\nfunction markTaskCompleted(task, ms) {\n  if (enableProfiling) {\n    profilingState[PRIORITY] = NoPriority;\n    profilingState[CURRENT_TASK_ID] = 0;\n    profilingState[QUEUE_SIZE]--;\n\n    if (eventLog !== null) {\n      logEvent([TaskCompleteEvent, ms * 1000, task.id]);\n    }\n  }\n}\nfunction markTaskCanceled(task, ms) {\n  if (enableProfiling) {\n    profilingState[QUEUE_SIZE]--;\n\n    if (eventLog !== null) {\n      logEvent([TaskCancelEvent, ms * 1000, task.id]);\n    }\n  }\n}\nfunction markTaskErrored(task, ms) {\n  if (enableProfiling) {\n    profilingState[PRIORITY] = NoPriority;\n    profilingState[CURRENT_TASK_ID] = 0;\n    profilingState[QUEUE_SIZE]--;\n\n    if (eventLog !== null) {\n      logEvent([TaskErrorEvent, ms * 1000, task.id]);\n    }\n  }\n}\nfunction markTaskRun(task, ms) {\n  if (enableProfiling) {\n    runIdCounter++;\n    profilingState[PRIORITY] = task.priorityLevel;\n    profilingState[CURRENT_TASK_ID] = task.id;\n    profilingState[CURRENT_RUN_ID] = runIdCounter;\n\n    if (eventLog !== null) {\n      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);\n    }\n  }\n}\nfunction markTaskYield(task, ms) {\n  if (enableProfiling) {\n    profilingState[PRIORITY] = NoPriority;\n    profilingState[CURRENT_TASK_ID] = 0;\n    profilingState[CURRENT_RUN_ID] = 0;\n\n    if (eventLog !== null) {\n      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);\n    }\n  }\n}\nfunction markSchedulerSuspended(ms) {\n  if (enableProfiling) {\n    mainThreadIdCounter++;\n\n    if (eventLog !== null) {\n      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);\n    }\n  }\n}\nfunction markSchedulerUnsuspended(ms) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);\n    }\n  }\n}\n\n/* eslint-disable no-var */\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\n\nvar maxSigned31BitInt = 1073741823; // Times out immediately\n\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\nvar USER_BLOCKING_PRIORITY = 250;\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\nvar LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\nvar IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap\n\nvar taskQueue = [];\nvar timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\nvar taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\n\nvar isSchedulerPaused = false;\nvar currentTask = null;\nvar currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.\n\nvar isPerformingWork = false;\nvar isHostCallbackScheduled = false;\nvar isHostTimeoutScheduled = false;\n\nfunction advanceTimers(currentTime) {\n  // Check for tasks that are no longer delayed and add them to the queue.\n  var timer = peek(timerQueue);\n\n  while (timer !== null) {\n    if (timer.callback === null) {\n      // Timer was cancelled.\n      pop(timerQueue);\n    } else if (timer.startTime <= currentTime) {\n      // Timer fired. Transfer to the task queue.\n      pop(timerQueue);\n      timer.sortIndex = timer.expirationTime;\n      push(taskQueue, timer);\n\n      if (enableProfiling) {\n        markTaskStart(timer, currentTime);\n        timer.isQueued = true;\n      }\n    } else {\n      // Remaining timers are pending.\n      return;\n    }\n\n    timer = peek(timerQueue);\n  }\n}\n\nfunction handleTimeout(currentTime) {\n  isHostTimeoutScheduled = false;\n  advanceTimers(currentTime);\n\n  if (!isHostCallbackScheduled) {\n    if (peek(taskQueue) !== null) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    } else {\n      var firstTimer = peek(timerQueue);\n\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n    }\n  }\n}\n\nfunction flushWork(hasTimeRemaining, initialTime) {\n  if (enableProfiling) {\n    markSchedulerUnsuspended(initialTime);\n  } // We'll need a host callback the next time work is scheduled.\n\n\n  isHostCallbackScheduled = false;\n\n  if (isHostTimeoutScheduled) {\n    // We scheduled a timeout but it's no longer needed. Cancel it.\n    isHostTimeoutScheduled = false;\n    cancelHostTimeout();\n  }\n\n  isPerformingWork = true;\n  var previousPriorityLevel = currentPriorityLevel;\n\n  try {\n    if (enableProfiling) {\n      try {\n        return workLoop(hasTimeRemaining, initialTime);\n      } catch (error) {\n        if (currentTask !== null) {\n          var currentTime = exports.unstable_now();\n          markTaskErrored(currentTask, currentTime);\n          currentTask.isQueued = false;\n        }\n\n        throw error;\n      }\n    } else {\n      // No catch in prod codepath.\n      return workLoop(hasTimeRemaining, initialTime);\n    }\n  } finally {\n    currentTask = null;\n    currentPriorityLevel = previousPriorityLevel;\n    isPerformingWork = false;\n\n    if (enableProfiling) {\n      var _currentTime = exports.unstable_now();\n\n      markSchedulerSuspended(_currentTime);\n    }\n  }\n}\n\nfunction workLoop(hasTimeRemaining, initialTime) {\n  var currentTime = initialTime;\n  advanceTimers(currentTime);\n  currentTask = peek(taskQueue);\n\n  while (currentTask !== null && !(enableSchedulerDebugging && isSchedulerPaused)) {\n    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n      // This currentTask hasn't expired, and we've reached the deadline.\n      break;\n    }\n\n    var callback = currentTask.callback;\n\n    if (callback !== null) {\n      currentTask.callback = null;\n      currentPriorityLevel = currentTask.priorityLevel;\n      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n      markTaskRun(currentTask, currentTime);\n      var continuationCallback = callback(didUserCallbackTimeout);\n      currentTime = exports.unstable_now();\n\n      if (typeof continuationCallback === 'function') {\n        currentTask.callback = continuationCallback;\n        markTaskYield(currentTask, currentTime);\n      } else {\n        if (enableProfiling) {\n          markTaskCompleted(currentTask, currentTime);\n          currentTask.isQueued = false;\n        }\n\n        if (currentTask === peek(taskQueue)) {\n          pop(taskQueue);\n        }\n      }\n\n      advanceTimers(currentTime);\n    } else {\n      pop(taskQueue);\n    }\n\n    currentTask = peek(taskQueue);\n  } // Return whether there's additional work\n\n\n  if (currentTask !== null) {\n    return true;\n  } else {\n    var firstTimer = peek(timerQueue);\n\n    if (firstTimer !== null) {\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n\n    return false;\n  }\n}\n\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n    case LowPriority:\n    case IdlePriority:\n      break;\n\n    default:\n      priorityLevel = NormalPriority;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_next(eventHandler) {\n  var priorityLevel;\n\n  switch (currentPriorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = NormalPriority;\n      break;\n\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_wrapCallback(callback) {\n  var parentPriorityLevel = currentPriorityLevel;\n  return function () {\n    // This is a fork of runWithPriority, inlined for performance.\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n}\n\nfunction timeoutForPriorityLevel(priorityLevel) {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n      return IMMEDIATE_PRIORITY_TIMEOUT;\n\n    case UserBlockingPriority:\n      return USER_BLOCKING_PRIORITY;\n\n    case IdlePriority:\n      return IDLE_PRIORITY;\n\n    case LowPriority:\n      return LOW_PRIORITY_TIMEOUT;\n\n    case NormalPriority:\n    default:\n      return NORMAL_PRIORITY_TIMEOUT;\n  }\n}\n\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\n  var currentTime = exports.unstable_now();\n  var startTime;\n  var timeout;\n\n  if (typeof options === 'object' && options !== null) {\n    var delay = options.delay;\n\n    if (typeof delay === 'number' && delay > 0) {\n      startTime = currentTime + delay;\n    } else {\n      startTime = currentTime;\n    }\n\n    timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);\n  } else {\n    timeout = timeoutForPriorityLevel(priorityLevel);\n    startTime = currentTime;\n  }\n\n  var expirationTime = startTime + timeout;\n  var newTask = {\n    id: taskIdCounter++,\n    callback: callback,\n    priorityLevel: priorityLevel,\n    startTime: startTime,\n    expirationTime: expirationTime,\n    sortIndex: -1\n  };\n\n  if (enableProfiling) {\n    newTask.isQueued = false;\n  }\n\n  if (startTime > currentTime) {\n    // This is a delayed task.\n    newTask.sortIndex = startTime;\n    push(timerQueue, newTask);\n\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n      // All tasks are delayed, and this is the task with the earliest delay.\n      if (isHostTimeoutScheduled) {\n        // Cancel an existing timeout.\n        cancelHostTimeout();\n      } else {\n        isHostTimeoutScheduled = true;\n      } // Schedule a timeout.\n\n\n      requestHostTimeout(handleTimeout, startTime - currentTime);\n    }\n  } else {\n    newTask.sortIndex = expirationTime;\n    push(taskQueue, newTask);\n\n    if (enableProfiling) {\n      markTaskStart(newTask, currentTime);\n      newTask.isQueued = true;\n    } // Schedule a host callback, if needed. If we're already performing work,\n    // wait until the next time we yield.\n\n\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    }\n  }\n\n  return newTask;\n}\n\nfunction unstable_pauseExecution() {\n  isSchedulerPaused = true;\n}\n\nfunction unstable_continueExecution() {\n  isSchedulerPaused = false;\n\n  if (!isHostCallbackScheduled && !isPerformingWork) {\n    isHostCallbackScheduled = true;\n    requestHostCallback(flushWork);\n  }\n}\n\nfunction unstable_getFirstCallbackNode() {\n  return peek(taskQueue);\n}\n\nfunction unstable_cancelCallback(task) {\n  if (enableProfiling) {\n    if (task.isQueued) {\n      var currentTime = exports.unstable_now();\n      markTaskCanceled(task, currentTime);\n      task.isQueued = false;\n    }\n  } // Null out the callback to indicate the task has been canceled. (Can't\n  // remove from the queue because you can't remove arbitrary nodes from an\n  // array based heap, only the first one.)\n\n\n  task.callback = null;\n}\n\nfunction unstable_getCurrentPriorityLevel() {\n  return currentPriorityLevel;\n}\n\nfunction unstable_shouldYield() {\n  var currentTime = exports.unstable_now();\n  advanceTimers(currentTime);\n  var firstTask = peek(taskQueue);\n  return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();\n}\n\nvar unstable_requestPaint = requestPaint;\nvar unstable_Profiling = enableProfiling ? {\n  startLoggingProfilingEvents: startLoggingProfilingEvents,\n  stopLoggingProfilingEvents: stopLoggingProfilingEvents,\n  sharedProfilingBuffer: sharedProfilingBuffer\n} : null;\n\nexports.unstable_ImmediatePriority = ImmediatePriority;\nexports.unstable_UserBlockingPriority = UserBlockingPriority;\nexports.unstable_NormalPriority = NormalPriority;\nexports.unstable_IdlePriority = IdlePriority;\nexports.unstable_LowPriority = LowPriority;\nexports.unstable_runWithPriority = unstable_runWithPriority;\nexports.unstable_next = unstable_next;\nexports.unstable_scheduleCallback = unstable_scheduleCallback;\nexports.unstable_cancelCallback = unstable_cancelCallback;\nexports.unstable_wrapCallback = unstable_wrapCallback;\nexports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\nexports.unstable_shouldYield = unstable_shouldYield;\nexports.unstable_requestPaint = unstable_requestPaint;\nexports.unstable_continueExecution = unstable_continueExecution;\nexports.unstable_pauseExecution = unstable_pauseExecution;\nexports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\nexports.unstable_Profiling = unstable_Profiling;\n  })();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}