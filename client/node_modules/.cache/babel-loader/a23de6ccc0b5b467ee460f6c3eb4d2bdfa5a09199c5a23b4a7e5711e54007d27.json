{"ast":null,"code":"// In our case, there's only one dependency\n\nvar toRgb = require('hsl-to-rgb-for-reals');\n\n// Typically all dependencies should be declared at the top of the file.\n\n// Now let's define an API for our module, we're taking hue, saturation and luminosity values and outputting a CSS compatible hex string.\n// Hue is in degrees, between 0 and 359. Since degrees a cyclical in nature, we'll support numbers greater than 359 or less than 0 by \"spinning\" them around until they fall within the 0 to 359 range.\n// Saturation and luminosity are both percentages, we'll represent these percentages with whole numbers between 0 and 100. For these numbers we'll need to enforce a maximum and a minimum, anything below 0 will become 0, anything above 100 will become 100.\n// Let's write some utility functions to handle this logic:\n\nfunction max(val, n) {\n  return val > n ? n : val;\n}\nfunction min(val, n) {\n  return val < n ? n : val;\n}\nfunction cycle(val) {\n  // for safety:\n  val = max(val, 1e7);\n  val = min(val, -1e7);\n  // cycle value:\n  while (val < 0) {\n    val += 360;\n  }\n  while (val > 359) {\n    val -= 360;\n  }\n  return val;\n}\n\n// Now for the main piece, the `hsl` function:\n\nfunction hsl(hue, saturation, luminosity) {\n  // resolve degrees to 0 - 359 range\n  hue = cycle(hue);\n\n  // enforce constraints\n  saturation = min(max(saturation, 100), 0);\n  luminosity = min(max(luminosity, 100), 0);\n\n  // convert to 0 to 1 range used by hsl-to-rgb-for-reals\n  saturation /= 100;\n  luminosity /= 100;\n\n  // let hsl-to-rgb-for-reals do the hard work\n  var rgb = toRgb(hue, saturation, luminosity);\n\n  // convert each value in the returned RGB array\n  // to a 2 character hex value, join the array into\n  // a string, prefixed with a hash\n  return '#' + rgb.map(function (n) {\n    return (256 + n).toString(16).substr(-2);\n  }).join('');\n}\n\n// In order to make our code into a bona fide module we have to export it:\n\nmodule.exports = hsl;","map":{"version":3,"names":["toRgb","require","max","val","n","min","cycle","hsl","hue","saturation","luminosity","rgb","map","toString","substr","join","module","exports"],"sources":["C:/Users/Abdullah/Desktop/Project/TTP-Project/client/node_modules/hsl-to-hex/index.js"],"sourcesContent":["// In our case, there's only one dependency\n\nvar toRgb = require('hsl-to-rgb-for-reals')\n\n// Typically all dependencies should be declared at the top of the file.\n\n// Now let's define an API for our module, we're taking hue, saturation and luminosity values and outputting a CSS compatible hex string.\n// Hue is in degrees, between 0 and 359. Since degrees a cyclical in nature, we'll support numbers greater than 359 or less than 0 by \"spinning\" them around until they fall within the 0 to 359 range.\n// Saturation and luminosity are both percentages, we'll represent these percentages with whole numbers between 0 and 100. For these numbers we'll need to enforce a maximum and a minimum, anything below 0 will become 0, anything above 100 will become 100.\n// Let's write some utility functions to handle this logic:\n\nfunction max (val, n) {\n  return (val > n) ? n : val\n}\n\nfunction min (val, n) {\n  return (val < n) ? n : val\n}\n\nfunction cycle (val) {\n  // for safety:\n  val = max(val, 1e7)\n  val = min(val, -1e7)\n  // cycle value:\n  while (val < 0) { val += 360 }\n  while (val > 359) { val -= 360 }\n  return val\n}\n\n// Now for the main piece, the `hsl` function:\n\nfunction hsl (hue, saturation, luminosity) {\n  // resolve degrees to 0 - 359 range\n  hue = cycle(hue)\n\n  // enforce constraints\n  saturation = min(max(saturation, 100), 0)\n  luminosity = min(max(luminosity, 100), 0)\n\n  // convert to 0 to 1 range used by hsl-to-rgb-for-reals\n  saturation /= 100\n  luminosity /= 100\n\n  // let hsl-to-rgb-for-reals do the hard work\n  var rgb = toRgb(hue, saturation, luminosity)\n\n  // convert each value in the returned RGB array\n  // to a 2 character hex value, join the array into\n  // a string, prefixed with a hash\n  return '#' + rgb\n    .map(function (n) {\n      return (256 + n).toString(16).substr(-2)\n    })\n    .join('')\n}\n\n// In order to make our code into a bona fide module we have to export it:\n\nmodule.exports = hsl\n"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,sBAAsB,CAAC;;AAE3C;;AAEA;AACA;AACA;AACA;;AAEA,SAASC,GAAG,CAAEC,GAAG,EAAEC,CAAC,EAAE;EACpB,OAAQD,GAAG,GAAGC,CAAC,GAAIA,CAAC,GAAGD,GAAG;AAC5B;AAEA,SAASE,GAAG,CAAEF,GAAG,EAAEC,CAAC,EAAE;EACpB,OAAQD,GAAG,GAAGC,CAAC,GAAIA,CAAC,GAAGD,GAAG;AAC5B;AAEA,SAASG,KAAK,CAAEH,GAAG,EAAE;EACnB;EACAA,GAAG,GAAGD,GAAG,CAACC,GAAG,EAAE,GAAG,CAAC;EACnBA,GAAG,GAAGE,GAAG,CAACF,GAAG,EAAE,CAAC,GAAG,CAAC;EACpB;EACA,OAAOA,GAAG,GAAG,CAAC,EAAE;IAAEA,GAAG,IAAI,GAAG;EAAC;EAC7B,OAAOA,GAAG,GAAG,GAAG,EAAE;IAAEA,GAAG,IAAI,GAAG;EAAC;EAC/B,OAAOA,GAAG;AACZ;;AAEA;;AAEA,SAASI,GAAG,CAAEC,GAAG,EAAEC,UAAU,EAAEC,UAAU,EAAE;EACzC;EACAF,GAAG,GAAGF,KAAK,CAACE,GAAG,CAAC;;EAEhB;EACAC,UAAU,GAAGJ,GAAG,CAACH,GAAG,CAACO,UAAU,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC;EACzCC,UAAU,GAAGL,GAAG,CAACH,GAAG,CAACQ,UAAU,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC;;EAEzC;EACAD,UAAU,IAAI,GAAG;EACjBC,UAAU,IAAI,GAAG;;EAEjB;EACA,IAAIC,GAAG,GAAGX,KAAK,CAACQ,GAAG,EAAEC,UAAU,EAAEC,UAAU,CAAC;;EAE5C;EACA;EACA;EACA,OAAO,GAAG,GAAGC,GAAG,CACbC,GAAG,CAAC,UAAUR,CAAC,EAAE;IAChB,OAAO,CAAC,GAAG,GAAGA,CAAC,EAAES,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC,CAAC;EAC1C,CAAC,CAAC,CACDC,IAAI,CAAC,EAAE,CAAC;AACb;;AAEA;;AAEAC,MAAM,CAACC,OAAO,GAAGV,GAAG"},"metadata":{},"sourceType":"script","externalDependencies":[]}