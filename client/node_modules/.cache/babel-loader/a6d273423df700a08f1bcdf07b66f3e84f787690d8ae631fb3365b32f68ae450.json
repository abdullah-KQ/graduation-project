{"ast":null,"code":"import arcToCurve from 'svg-arc-to-cubic-bezier';\nexport default function normalize(path) {\n  // init state\n  var prev;\n  var result = [];\n  var bezierX = 0;\n  var bezierY = 0;\n  var startX = 0;\n  var startY = 0;\n  var quadX = null;\n  var quadY = null;\n  var x = 0;\n  var y = 0;\n  for (var i = 0, len = path.length; i < len; i++) {\n    var seg = path[i];\n    var command = seg[0];\n    switch (command) {\n      case 'M':\n        startX = seg[1];\n        startY = seg[2];\n        break;\n      case 'A':\n        var curves = arcToCurve({\n          px: x,\n          py: y,\n          cx: seg[6],\n          cy: seg[7],\n          rx: seg[1],\n          ry: seg[2],\n          xAxisRotation: seg[3],\n          largeArcFlag: seg[4],\n          sweepFlag: seg[5]\n        });\n\n        // null-curves\n        if (!curves.length) continue;\n        for (var j = 0, c; j < curves.length; j++) {\n          c = curves[j];\n          seg = ['C', c.x1, c.y1, c.x2, c.y2, c.x, c.y];\n          if (j < curves.length - 1) result.push(seg);\n        }\n        break;\n      case 'S':\n        // default control point\n        var cx = x;\n        var cy = y;\n        if (prev == 'C' || prev == 'S') {\n          cx += cx - bezierX; // reflect the previous command's control\n          cy += cy - bezierY; // point relative to the current point\n        }\n\n        seg = ['C', cx, cy, seg[1], seg[2], seg[3], seg[4]];\n        break;\n      case 'T':\n        if (prev == 'Q' || prev == 'T') {\n          quadX = x * 2 - quadX; // as with 'S' reflect previous control point\n          quadY = y * 2 - quadY;\n        } else {\n          quadX = x;\n          quadY = y;\n        }\n        seg = quadratic(x, y, quadX, quadY, seg[1], seg[2]);\n        break;\n      case 'Q':\n        quadX = seg[1];\n        quadY = seg[2];\n        seg = quadratic(x, y, seg[1], seg[2], seg[3], seg[4]);\n        break;\n      case 'L':\n        seg = line(x, y, seg[1], seg[2]);\n        break;\n      case 'H':\n        seg = line(x, y, seg[1], y);\n        break;\n      case 'V':\n        seg = line(x, y, x, seg[1]);\n        break;\n      case 'Z':\n        seg = line(x, y, startX, startY);\n        break;\n    }\n\n    // update state\n    prev = command;\n    x = seg[seg.length - 2];\n    y = seg[seg.length - 1];\n    if (seg.length > 4) {\n      bezierX = seg[seg.length - 4];\n      bezierY = seg[seg.length - 3];\n    } else {\n      bezierX = x;\n      bezierY = y;\n    }\n    result.push(seg);\n  }\n  return result;\n}\nfunction line(x1, y1, x2, y2) {\n  return ['C', x1, y1, x2, y2, x2, y2];\n}\nfunction quadratic(x1, y1, cx, cy, x2, y2) {\n  return ['C', x1 / 3 + 2 / 3 * cx, y1 / 3 + 2 / 3 * cy, x2 / 3 + 2 / 3 * cx, y2 / 3 + 2 / 3 * cy, x2, y2];\n}","map":{"version":3,"names":["arcToCurve","normalize","path","prev","result","bezierX","bezierY","startX","startY","quadX","quadY","x","y","i","len","length","seg","command","curves","px","py","cx","cy","rx","ry","xAxisRotation","largeArcFlag","sweepFlag","j","c","x1","y1","x2","y2","push","quadratic","line"],"sources":["C:/Users/Abdullah/Desktop/Project/TTP-Project/client/node_modules/normalize-svg-path/index.mjs"],"sourcesContent":["import arcToCurve from 'svg-arc-to-cubic-bezier'\r\n\r\nexport default function normalize(path){\r\n  // init state\r\n  var prev\r\n  var result = []\r\n  var bezierX = 0\r\n  var bezierY = 0\r\n  var startX = 0\r\n  var startY = 0\r\n  var quadX = null\r\n  var quadY = null\r\n  var x = 0\r\n  var y = 0\r\n\r\n  for (var i = 0, len = path.length; i < len; i++) {\r\n    var seg = path[i]\r\n    var command = seg[0]\r\n\r\n    switch (command) {\r\n      case 'M':\r\n        startX = seg[1]\r\n        startY = seg[2]\r\n        break\r\n      case 'A':\r\n        var curves = arcToCurve({\r\n          px: x,\r\n          py: y,\r\n          cx: seg[6],\r\n          cy:  seg[7],\r\n          rx: seg[1],\r\n          ry: seg[2],\r\n          xAxisRotation: seg[3],\r\n          largeArcFlag: seg[4],\r\n          sweepFlag: seg[5]\r\n        })\r\n\r\n        // null-curves\r\n        if (!curves.length) continue\r\n\r\n        for (var j = 0, c; j < curves.length; j++) {\r\n          c = curves[j]\r\n          seg = ['C', c.x1, c.y1, c.x2, c.y2, c.x, c.y]\r\n          if (j < curves.length - 1) result.push(seg)\r\n        }\r\n\r\n        break\r\n      case 'S':\r\n        // default control point\r\n        var cx = x\r\n        var cy = y\r\n        if (prev == 'C' || prev == 'S') {\r\n          cx += cx - bezierX // reflect the previous command's control\r\n          cy += cy - bezierY // point relative to the current point\r\n        }\r\n        seg = ['C', cx, cy, seg[1], seg[2], seg[3], seg[4]]\r\n        break\r\n      case 'T':\r\n        if (prev == 'Q' || prev == 'T') {\r\n          quadX = x * 2 - quadX // as with 'S' reflect previous control point\r\n          quadY = y * 2 - quadY\r\n        } else {\r\n          quadX = x\r\n          quadY = y\r\n        }\r\n        seg = quadratic(x, y, quadX, quadY, seg[1], seg[2])\r\n        break\r\n      case 'Q':\r\n        quadX = seg[1]\r\n        quadY = seg[2]\r\n        seg = quadratic(x, y, seg[1], seg[2], seg[3], seg[4])\r\n        break\r\n      case 'L':\r\n        seg = line(x, y, seg[1], seg[2])\r\n        break\r\n      case 'H':\r\n        seg = line(x, y, seg[1], y)\r\n        break\r\n      case 'V':\r\n        seg = line(x, y, x, seg[1])\r\n        break\r\n      case 'Z':\r\n        seg = line(x, y, startX, startY)\r\n        break\r\n    }\r\n\r\n    // update state\r\n    prev = command\r\n    x = seg[seg.length - 2]\r\n    y = seg[seg.length - 1]\r\n    if (seg.length > 4) {\r\n      bezierX = seg[seg.length - 4]\r\n      bezierY = seg[seg.length - 3]\r\n    } else {\r\n      bezierX = x\r\n      bezierY = y\r\n    }\r\n    result.push(seg)\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nfunction line(x1, y1, x2, y2){\r\n  return ['C', x1, y1, x2, y2, x2, y2]\r\n}\r\n\r\nfunction quadratic(x1, y1, cx, cy, x2, y2){\r\n  return [\r\n    'C',\r\n    x1/3 + (2/3) * cx,\r\n    y1/3 + (2/3) * cy,\r\n    x2/3 + (2/3) * cx,\r\n    y2/3 + (2/3) * cy,\r\n    x2,\r\n    y2\r\n  ]\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}